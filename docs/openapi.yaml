openapi: 3.0.0
info:
  title: Auto Quote API
  version: 1.0.0
  description: Static-response Auto Quote API intended for ChatGPT plugin consumption.

servers:
  - url: https://quote-proxy-qmypa0.5sc6y6-3.usa-e2.cloudhub.io/

paths:
  /quotes:
    post:
      summary: Create a quote (static)
      operationId: createQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '200':
          description: Static quote response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'

  /quotes/{id}:
    get:
      summary: Get a quote by id (static)
      operationId: getQuote
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Static quote by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'

components:
  schemas:
    Address:
      type: object
      required: [street, city, state, zip]
      properties:
        street: { type: string }
        city:   { type: string }
        state:  { type: string }
        zip:    { type: string }

    PersonalInfo:
      type: object
      required: [firstName, lastName, dob, email, phone, address]
      properties:
        firstName: { type: string }
        lastName:  { type: string }
        dob:       { type: string, format: date }
        email:     { type: string, format: email }
        phone:     { type: string }
        address:   { $ref: '#/components/schemas/Address' }

    Driver:
      type: object
      required: [firstName, lastName, dob, licenseNumber, licenseState, yearsLicensed]
      properties:
        firstName: { type: string }
        lastName:  { type: string }
        dob:       { type: string, format: date }
        licenseNumber: { type: string }
        licenseState:  { type: string }
        yearsLicensed: { type: integer }
        violations:
          type: array
          items:
            type: object

    Vehicle:
      type: object
      required: [year, make, model, usage, annualMileage]
      properties:
        vin: { type: string }
        year:  { type: integer }
        make:  { type: string }
        model: { type: string }
        usage: { type: string }
        annualMileage: { type: integer }
        safety:
          type: object
          properties:
            abs: { type: boolean }
            antiTheft: { type: boolean }
            airbags: { type: boolean }

    Coverage:
      type: object
      required: [liability, collisionDeductible, compDeductible]
      properties:
        liability:
          type: object
          required: [biPerPerson, biPerAccident, pd]
          properties:
            biPerPerson: { type: integer }
            biPerAccident: { type: integer }
            pd: { type: integer }
        umUim: { type: boolean }
        pipMedpay: { type: boolean }
        collisionDeductible: { type: integer }
        compDeductible: { type: integer }
        roadside: { type: boolean }
        rental: { type: boolean }

    InsuranceHistory:
      type: object
      properties:
        priorInsurance:   { type: boolean }
        priorCarrier:     { type: string }
        continuousMonths: { type: integer }

    QuoteRequest:
      type: object
      required: [state, policyStart, personal, drivers, vehicles, coverage]
      properties:
        state: { type: string }
        policyStart: { type: string, format: date }
        personal: { $ref: '#/components/schemas/PersonalInfo' }
        drivers:
          type: array
          items: { $ref: '#/components/schemas/Driver' }
        vehicles:
          type: array
          items: { $ref: '#/components/schemas/Vehicle' }
        coverage: { $ref: '#/components/schemas/Coverage' }
        history:  { $ref: '#/components/schemas/InsuranceHistory' }

    QuoteResponse:
      type: object
      properties:
        quoteId: { type: string }
        carrier: { type: string }
        term:    { type: string }
        totalPremium: { type: number }
        monthlyPremium: { type: number }
        state: { type: string }
        breakdown:
          type: array
          items:
            type: object
            properties:
              vehicle: { type: string }
              premium: { type: number }
        chosenCoverage: { $ref: '#/components/schemas/Coverage' }
openapi: 3.0.0
info:
  title: Auto Quote API
  version: 1.0.0
  description: Static-response Auto Quote API intended for ChatGPT plugin consumption.

servers:
  - url: https://quote-proxy-qmypa0.5sc6y6-3.usa-e2.cloudhub.io/

paths:
  /quotes:
    post:
      summary: Create a quote (static)
      operationId: createQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '200':
          description: Static quote response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'

  /quotes/{id}:
    get:
      summary: Get a quote by id (static)
      operationId: getQuote
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Static quote by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'

components:
  schemas:
    Address:
      type: object
      required: [street, city, state, zip]
      properties:
        street: { type: string }
        city:   { type: string }
        state:  { type: string }
        zip:    { type: string }

    PersonalInfo:
      type: object
      required: [firstName, lastName, dob, email, phone, address]
      properties:
        firstName: { type: string }
        lastName:  { type: string }
        dob:       { type: string, format: date }
        email:     { type: string, format: email }
        phone:     { type: string }
        address:   { $ref: '#/components/schemas/Address' }

    Driver:
      type: object
      required: [firstName, lastName, dob, licenseNumber, licenseState, yearsLicensed]
      properties:
        firstName: { type: string }
        lastName:  { type: string }
        dob:       { type: string, format: date }
        licenseNumber: { type: string }
        licenseState:  { type: string }
        yearsLicensed: { type: integer }
        violations:
          type: array
          items:
            type: object

    Vehicle:
      type: object
      required: [year, make, model, usage, annualMileage]
      properties:
        vin: { type: string }
        year:  { type: integer }
        make:  { type: string }
        model: { type: string }
        usage: { type: string }
        annualMileage: { type: integer }
        safety:
          type: object
          properties:
            abs: { type: boolean }
            antiTheft: { type: boolean }
            airbags: { type: boolean }

    Coverage:
      type: object
      required: [liability, collisionDeductible, compDeductible]
      properties:
        liability:
          type: object
          required: [biPerPerson, biPerAccident, pd]
          properties:
            biPerPerson: { type: integer }
            biPerAccident: { type: integer }
            pd: { type: integer }
        umUim: { type: boolean }
        pipMedpay: { type: boolean }
        collisionDeductible: { type: integer }
        compDeductible: { type: integer }
        roadside: { type: boolean }
        rental: { type: boolean }

    InsuranceHistory:
      type: object
      properties:
        priorInsurance:   { type: boolean }
        priorCarrier:     { type: string }
        continuousMonths: { type: integer }

    QuoteRequest:
      type: object
      required: [state, policyStart, personal, drivers, vehicles, coverage]
      properties:
        state: { type: string }
        policyStart: { type: string, format: date }
        personal: { $ref: '#/components/schemas/PersonalInfo' }
        drivers:
          type: array
          items: { $ref: '#/components/schemas/Driver' }
        vehicles:
          type: array
          items: { $ref: '#/components/schemas/Vehicle' }
        coverage: { $ref: '#/components/schemas/Coverage' }
        history:  { $ref: '#/components/schemas/InsuranceHistory' }

    QuoteResponse:
      type: object
      properties:
        quoteId: { type: string }
        carrier: { type: string }
        term:    { type: string }
        totalPremium: { type: number }
        monthlyPremium: { type: number }
        state: { type: string }
        breakdown:
          type: array
          items:
            type: object
            properties:
              vehicle: { type: string }
              premium: { type: number }
        chosenCoverage: { $ref: '#/components/schemas/Coverage' }
